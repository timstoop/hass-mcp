[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "hass-mcp"
version = "0.1.1"
description = "Home Assistant Model Context Protocol (MCP) server"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "mcp[cli]>=1.4.1",
    "httpx>=0.27.0",
]

[project.optional-dependencies]
test = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "coverage[toml]>=7.6.0",
]
dev = [
    "mypy>=1.8.0",
    "bandit[toml]>=1.7.5",
    "ruff>=0.8.0",
    "types-httpx>=0.27.0",
]

[project.scripts]
hass-mcp = "app.run:main"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
log_cli = true
log_cli_level = "INFO"
markers = [
    "asyncio: Tests that use asyncio"
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]

[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "tests/*",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 90
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true
namespace_packages = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.ruff]
target-version = "py312"
line-length = 100
extend-exclude = [
    ".venv",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # flake8-eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by black
    "PLR0913", # too many arguments to function call
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG",     # unused function arguments in tests
    "PLR2004", # magic values in tests are ok
    "S101",    # use of assert in tests
]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
skips = ["B101"]  # Allow assert in tests via exclude_dirs

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]